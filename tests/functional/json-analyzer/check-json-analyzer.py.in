#!/usr/bin/python
#
# JSON-service functional test launcher script
# Author: Ilya Storozhilov
# Description: JSON-service functional test launcher script
# Copyright (c) 2013-2014 EPAM Systems
#
#    This file is part of Nfstrace.
#
#    Nfstrace is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2 of the License.
#
#    Nfstrace is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Nfstrace.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import signal
import subprocess
import time
import socket
import json

if len(sys.argv) < 2:
    print os.path.basename(sys.argv[0]) + " <trace.pcap.bz2> <reference.json>"
    exit(1)

IF_NAME = "eth0"
#IF_NAME = "tap0"   # TODO: Use virtual interface
AWAIT_TIMEOUT = 0.5

# Starting nfstrace with JSON service
captureProcess = subprocess.Popen(["${CMAKE_BINARY_DIR}/${PROJECT_NAME}", "-Z", "$ENV{USER}", "-i", IF_NAME, "-a", "${CMAKE_BINARY_DIR}/analyzers/libjson.so#host=localhost"])

# Awaiting for nfstrace to start capturing
time.sleep(AWAIT_TIMEOUT)

# Playing trace file
bzcatProcess = subprocess.Popen(["bzcat", sys.argv[1]], stdout=subprocess.PIPE)
replayProcess = subprocess.Popen(["tcpreplay", "-i", IF_NAME, "-"], stdin=bzcatProcess.stdout, stdout=subprocess.PIPE)
bzcatProcess.wait()
bzcatProcess.stdout.close()
replayProcess.wait();

# Awaiting for packets to be processed by nfstrace
time.sleep(AWAIT_TIMEOUT)

# Fetching statistics from nfstrace JSON service
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("localhost", 8888))
statisticsJsonStr = s.recv(4096)
statisticsJson = json.loads(statisticsJsonStr)

# Terminating nfstrace
captureProcess.send_signal(signal.SIGTERM)
captureProcess.wait();

# Checking result against reference
referenceFile = open(sys.argv[2])
referenceJson = json.load(referenceFile)
referenceFile.close();
if statisticsJson == referenceJson:
    exit(0)
else:
    sys.stderr.write("ERROR: Actual result differs from the referenced one:\n")
    nfsv3_ops = ["null", "getattr", "setattr", "lookup", "access", "readlink", "read",
            "write", "create", "mkdir", "symlink", "mkdnod", "remove", "rmdir", "rename",
            "link", "readdir", "readdirplus", "fsstat", "fsinfo", "pathconf", "commit"]
    for op in nfsv3_ops:
        if statisticsJson["nfs_v3"][op] != referenceJson["nfs_v3"][op]:
            sys.stderr.write("NFSv3 \"" + op + "\" operation occured " + str(statisticsJson["nfs_v3"][op]) + " times instead of " + str(referenceJson["nfs_v3"][op]) + "\n")
    exit(1)
